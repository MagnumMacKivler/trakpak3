// Trakpak3 FGD File

@include "base.fgd"

//Switch
@PointClass base(Angles) studioprop() = tp3_switch : "A simple switch. Swaps between two models to change tracks. All Input/Output and Control functions are handled by the Switch Stand."
[
	model(studio) : "Model (Main/Normal)" : "" : "The model path for this switch when in its Main/Normal position."
	model_div(studio) : "Model (Diverging/Reverse, Optional)" : "" : "The model path for this switch when in its Diverging/Reverse position. If left blank, it will be picked automatically based on the Main/Normal model."
	bodygroups(string) : "Bodygroups" : "" : "The model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	skin(integer) : "Skin" : 0 : "The skin to apply to the switch models."
	lever(target_destination) : "Switch Stand" : : "The name of the tp3_switch_lever_anim that controls this switch."
	animated(choices) : "Animate Switch?" : 1 : "Does this switch use smooth throwing animations?" =
	[
		0 : "No"
		1 : "Yes"
	]
	collision_mn(choices) : "Collisions (Main/Normal)" : 1 : "Should the switch have collisions when thrown to the Main/Normal Position? Same effect as a Gmod NoCollide All. This is only applied when a switch completes throwing - it will not work with trailing switches. Should only be set to 'No' if the tp3_switch is a derailer or something that must be nocollided in this position." =
	[
		0 : "No"
		1 : "Yes"
	]
	collision_dv(choices) : "Collisions (Diverging/Reverse)" : 1 : "Should the switch have collisions when thrown to the Diverging/Reverse Position? Same effect as a Gmod NoCollide All. This is only applied when a switch completes throwing - it will not work with trailing switches. Should only be set to 'No' if the tp3_switch is a derailer or something that must be nocollided in this position." =
	[
		0 : "No"
		1 : "Yes"
	]
	derail(choices) : "Switch Type" : 0 : "Should this switch behave like a switch or a derail? If a derail, props that touch it will have their momentum arrested. This only works if the Stand's 'Switch Auto-Scan' keyvalue is set." =
	[
		0 : "Switch/Other"
		1 : "Derail"
	]
	//usetrigger(choices) : "Use Trigger For Occupancy" : 0 : "Should this switch use the model's Trigger Bounds to detect occupancy? Set this for Crossovers or any switch where you want a more conservative indication of something being on the switch." =
	//[
	//	0 : "No"
	//	1 : "Yes"
	//]
	gmod_allowtools(string) readonly : "Allow Tools" : "advdupe2 tp3_node_editor tp3_node_chainer tp3_path_configurator" : "Disables the toolgun on this entity except for the tools listed here."
	disableshadows(choices) : "Disable Shadows" : 1 : "Most if not all track should have shadows disabled because they are part of the ground." =
	[
		0 : "No"
		1 : "Yes"
	]
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
]

//Switch Lever
@PointClass base(Targetname, Parentname, Angles) studioprop() line(0 255 0, targetname, targetname, targetname, linked_stand) line(0 255 255, targetname, targetname, targetname, mytrigger) = tp3_switch_lever_anim : "An animated or bodygrouped lever to control switches."
[
	model(studio) : "Model" : "" : "The model path for the switch lever."
	bodygroups(string) : "Bodygroups" : "" : "The switch stand's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	skin(integer) : "Skin" : 0 : "The skin to apply to the switch lever."
	
	seq_idle_close(string) : "Idle Main/Normal Seq" : "idle_close" : "The default sequence to use when the switch is locked in its Main/Normal position."
	seq_idle_open(string) : "Idle Diverging/Reverse Seq" : "idle_open" : "The sequence to use when the switch is locked in its Diverging/Reverse position."
	seq_throw_open(string) : "Throw Diverging/Reverse Seq" : "throw_open" : "The sequence to use when the switch is being thrown Diverging/Reverse."
	seq_throw_close(string) : "Throw Main/Normal Seq" : "throw_close" : "The sequence to use when the switch is being thrown Main/Normal."
	
	targetstate(choices) : "Initial Position" : 0 : "The lever will throw itself to this position immediately when the map starts." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	
	behavior(choices) : "Trailing Switch Behavior" : 0 : "How should the switch stand behave when a train tries to trail (run against) it? Your choices are: Manual, Derail: Does nothing as a train attempts to trail it, thus derailing the train. Manual, Break: The blades (points) will be forced into the correct position by the train, but the switch stand will break and be unusable for a brief period of time. Safety Throw: The switch will throw completely when trailed. Spring Switch: The switch will throw partially when trailed, then reset into the position it was in before the train trailed it." =
	[
		//-1 : "Dumb"
		0 : "Manual, Derail"
		1 : "Manual, Break"
		2 : "Safety Throw"
		3 : "Spring Switch"
	]
	
	autoscan(choices) : "Switch Auto-Scan" : 0 : "If No, switch occupancy must be provided by an external trigger; if no trigger is supplied, the switch is 'dumb'. If Yes, switch occupancy will be automatically calculated (may cause lag when used a lot)." =
	[
		0 : "No (Manual)"
		1 : "Yes (Automatic)"
	]
	mytrigger(target_destination) : "Manual Scan Trigger" : : "(Optional) Point this to a trigger_multiple and it will wire the Hammer I/O for you. Not needed if the switch is 'dumb' or if you're using Automatic Scanning. THE TRIGGER MUST USE A filter_activator_class SET TO ALLOW prop_physics AND BE SET TO DETECT PHYSICS OBJECTS FOR IT TO WORK PROPERLY."
	
	autoreset(choices) : "Auto-Reset?" : 0 : "Should this switch automatically reset back to Main/Normal position after the train has passed over it? Great for heavily-trafficked, mainline switches." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	bodygroups_closed(string) : "Bodygroups (Main/Normal)" : "" : "Bodygroups to set when the switch stand is thrown Main/Normal. See the regular 'Bodygroups' keyvalue for formatting help."
	bodygroups_motion(string) : "Bodygroups (Motion)" : "" : "Bodygroups to set when the switch stand is in motion. See the regular 'Bodygroups' keyvalue for formatting help."
	bodygroups_open(string) : "Bodygroups (Diverging/Reverse)" : "" : "Bodygroups to set when the switch stand is thrown Diverging/Reverse. See the regular 'Bodygroups' keyvalue for formatting help."
	
	collision_mn(choices) : "Collisions (Main/Normal)" : 1 : "Should the switch stand have collisions when thrown to the Main/Normal Position? Same effect as a Gmod NoCollide All." =
	[
		0 : "No"
		1 : "Yes"
	]
	collision_dv(choices) : "Collisions (Diverging/Reverse)" : 1 : "Should the switch stand have collisions when thrown to the Diverging/Reverse Position? Same effect as a Gmod NoCollide All." =
	[
		0 : "No"
		1 : "Yes"
	]
	levertype(choices) : "Lever Type/Purpose" : 0 : "What does this tp3_switch_lever_anim do? Used mostly for nomenclature. The 'I AM a DERAIL' option allows the entity to arrest the momentum of cars passing over it." =
	[
		0 : "I operate a SWITCH"
		1 : "I operate a DERAIL"
		2 : "I AM a DERAIL"
		3 : "I do something else"
	]
	
	
	linked_stand(target_destination) : "Linked Switch Stand" : : "Another tp3_switch_lever_anim that this stand will attempt to match states with. You do not need to point the linked stand back to this one; the switch stand will do that automatically."
	
	locked(choices) : "Automatic Only" : 0 : "If set, the switch will not be operable by pressing +Use on it, but can still be controlled from dispatch boards, Wiremod, or Hammer I/O." =
	[
		0 : "No"
		1 : "Yes"
	]
	nowire(choices) : "Disable Wiremod Input" : 0 : "If set, the switch will ignore wiremod inputs (but can still output)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	//gmod_allowphysgun(integer) readonly : "Allow Physgun" : 0 : "Disables the physgun on this entity."
	gmod_allowtools(string) readonly : "Allow Tools" : "wire_adv wire_debugger tp3_path_configurator" : "Disables the toolgun on this entity except for the tools listed here."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	input ThrowToggle(void) : "Toggle the switch state. This should probably be fired by a func_button."
	input ThrowMain(void) : "Throws the switch to Main/Normal."
	input ThrowDiverging(void) : "Throws the switch to Diverging/Reverse."
	
	input SetAutoOnly(void) : "Set this switch stand to disallow manual operation (by pressing +Use). The switch stand can still be controlled from dispatch boards, Wiremod, or Hammer I/O."
	input SetAllowManual(void) : "Set this switch stand to allow manual operation."
	
	input SetOccupancy(integer) : "Set Switch Occupancy (Manual). 0 for clear, 1 for occupied."
	
	output OnThrownMain(void) : "Fires when the switch is thrown Main/Normal."
	output OnThrownDiverging(void) : "Fires when the switch is thrown Diverging/Reverse."
	
	output OnUse(void) : "Fires when someone presses +Use (E) on the switch lever."
]

//Diamond
@PointClass base(Angles) studioprop() = tp3_diamond : "A stationary piece of track that will play frog sounds on four attachment points, named 'frog1' through 'frog4'."
[
	model(studio) : "Model" : "" : "The model path for the diamond."
	skin(integer) : "Skin" : 0 : "The skin for the diamond."
	gmod_allowtools(string) readonly : "Allow Tools" : "advdupe2 tp3_node_editor tp3_node_chainer" : "Disables the toolgun on this entity except for the tools listed here."
	disableshadows(choices) : "Disable Shadows" : 1 : "Most if not all track should have shadows disabled because they are part of the ground." =
	[
		0 : "No"
		1 : "Yes"
	]
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
]

//Turntable Test
@PointClass base(Targetname, Angles) studioprop() = tp3_turntable : "A piece of track that rotates to allow reversing of rolling stock and changing tracks."
[
	model(studio) : "Model" : "" : "The model path for the turntable."
	skin(integer) : "Skin" : 0 : "The skin for the turntable model."
	bodygroups(string) : "Bodygroups" : "" : "The model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	
	pod(target_destination) : "Control Seat" : : "A prop_vehicle_prisoner_pod used for controlling the turntable."
	exitpoint(origin) : "Seat Exit Point" : : "Teleport the player here when they get out of the seat."
	
	stops(string) : "Stop Angles" : "0 45 90 135 180" : "Angles for the turntable to stop at, separated by spaces. Angles 180 degrees from given stops will be auto-created, so you don't need  to specify 90 and 270. Duplicate angles are also handled properly. Values will be normalized from -180 to +180."
	maxspeed(float) : "Max Speed" : "7.5" : "Max rotational speed, in degrees per second."
	//creepspeed(float) : "Creep Speed" : "2.5" : "Minimum speed turntable will assume when approaching a stop. You probably don't need to change this."
	acceleration(float) : "Acceleration Factor" : "2.5" : "Acceleration/Deceleration rate in degrees per second per second. You probably don't need to change this."
	
	key_ccw(choices) : "Move Counter-Clockwise Key" : "+forward" : "Key that the operator should press to move the table counterlockwise. Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	key_cw(choices) : "Move Clockwise Key" : "+back" : "Key that the operator should press to move the table clockwise. Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	
	sound_start(sound) : "Start Move Sound" : "ambient/machines/machine3.wav" : "The sound the turntable makes when it starts to move."
	sound_stop(sound) : "Stop Move Sound" : "doors/garage_stop1.wav" : "The sound the turntable makes when it comes to a complete stop."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	input Lock(void) : "Lock the turntable, preventing it from moving this should be required before moving a train on or off!"
	input Unlock(void) : "Unlock the turntable, allowing it to move again."
	
	input AddPusher(void) : "Add the !activator to the table's pusher list. This input should be fired by a trigger_multiple OnStartTouch."
	input RemovePusher(void) : "Remove the !activator from the table's pusher list. This input should be fired by a trigger_multiple OnEndTouch."
	
]

//Transfer Table
@PointClass base(Targetname, Angles) studioprop() = tp3_transfertable : "A table that slides back and forth to move rolling stock from one track onto another."
[
	model(studio) : "Model" : "" : "The model path for the transfer table."
	skin(integer) : "Skin" : 0 : "The skin for the transfer table model."
	bodygroups(string) : "Bodygroups" : "" : "The model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	
	pod(target_destination) : "Control Seat" : : "A prop_vehicle_prisoner_pod used for controlling the transfer table."
	exitpoint(origin) : "Seat Exit Point" : : "Teleport the player here when they get out of the seat."
	
	table_axis(vector) : "Table Axis (X Y Z)" : "1 0 0" : "Axis of table movement. '1 0 0' is East, '0 -1 0' is South, etc. The move distances scale to the magnitude of the vector (Magnitude =  sqrt(X^2 + Y^2 + Z^2). For transfer tables that move pure North, South, East, or West that should be 1. For transfer tables that move diagonally, it's okay to use a vector like '1 0.5 0', which makes it easier to snap to grid on diagonals."
	startpos(float) : "Initial Point" : "0.0" : "Where along the table axis is this table starting in? Note that the hammer position won't change; changing this value moves the axis accordingly."
	stops(string) : "Stop Points" : "0 192 384 576 768 960 1152 1344 1536" : "Points along the table's track where the table should stop."
	maxspeed(float) : "Max Speed" : "30" : "Max linear speed, in inches per second."
	//creepspeed(float) : "Creep Speed" : "2.5" : "Minimum speed table will assume when approaching a stop. You probably don't need to change this."
	acceleration(float) : "Acceleration Factor" : "10" : "Acceleration/Deceleration rate in inches per second per second. You probably don't need to change this."
	
	key_fwd(choices) : "Move Forward Key" : "+forward" : "Key that the operator should press to move the table forward, (positive along Table Axis). Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	key_rev(choices) : "Move Backward Key" : "+back" : "Key that the operator should press to move the table backward, (negative along Table Axis). Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	
	sound_start(sound) : "Start Move Sound" : "ambient/machines/machine3.wav" : "The sound the table makes when it starts to move under power."
	sound_stop(sound) : "Stop Move Sound" : "doors/garage_stop1.wav" : "The sound the table makes when it comes to a complete stop under power."
	sound_crash(sound) : "Crash Sound" : "plats/tram_hit4.wav" : "The sound the table makes when it comes to a complete stop due to being slammed into the track ends."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	input Lock(void) : "Lock the turntable, preventing it from moving this should be required before moving a train on or off!"
	input Unlock(void) : "Unlock the turntable, allowing it to move again."
]

//Movable Bridge
@PointClass base(Targetname, Angles) studioprop() = tp3_movable_bridge : "A movable bridge (bascule, swing, lift, etc.) that uses a model's animations, rather than a func_door_rotating or something to that effect. Supports powered and hand-cranked operation. In order to work, the model must be animated and it must have an attachment point 'leaf1' on the moving part of the bridge."
[
	model(studio) : "Model" : "" : "The model path for the animated part of the bridge."
	skin(integer) : "Skin" : 0 : "The skin for the bridge model."
	bodygroups(string) : "Bodygroups" : "" : "The bridge's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	
	pod(target_destination) : "Control Seat" : : "A prop_vehicle_prisoner_pod used for controlling the bridge."
	exitpoint(origin) : "Seat Exit Point" : : "Teleport the player here when they get out of the seat."
	
	deck_1(target_destination) : "Deck Rails 1" : : "A prop_dynamic piece of track that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics matters when the bridge is closed. Extra keyvalues can be added as 'deck_5', 'deck_6' etc."
	deck_2(target_destination) : "Deck Rails 2" : : "A prop_dynamic piece of track that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics matters when the bridge is closed. Extra keyvalues can be added as 'deck_5', 'deck_6' etc."
	deck_3(target_destination) : "Deck Rails 3" : : "A prop_dynamic piece of track that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics matters when the bridge is closed. Extra keyvalues can be added as 'deck_5', 'deck_6' etc."
	deck_4(target_destination) : "Deck Rails 4" : : "A prop_dynamic piece of track that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics matters when the bridge is closed. Extra keyvalues can be added as 'deck_5', 'deck_6' etc."
	
	cosmetic_1(target_destination) : "Cosmetic Prop 1" : : "An entity (can be anything) that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics DOES NOT matter. Extra keyvalues can be added as 'cosmetic_5', 'cosmetic_6' etc. NOTE: this CAN target multiple entities with the same name."
	cosmetic_2(target_destination) : "Cosmetic Prop 2" : : "An entity (can be anything) that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics DOES NOT matter. Extra keyvalues can be added as 'cosmetic_5', 'cosmetic_6' etc. NOTE: this CAN target multiple entities with the same name."
	cosmetic_3(target_destination) : "Cosmetic Prop 3" : : "An entity (can be anything) that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics DOES NOT matter. Extra keyvalues can be added as 'cosmetic_5', 'cosmetic_6' etc. NOTE: this CAN target multiple entities with the same name."
	cosmetic_4(target_destination) : "Cosmetic Prop 4" : : "An entity (can be anything) that will be automatically parented to the bridge's leaf (attachment 'leaf1'). Use this for props where the physics DOES NOT matter. Extra keyvalues can be added as 'cosmetic_5', 'cosmetic_6' etc. NOTE: this CAN target multiple entities with the same name."
	
	maxcycle(float) : "Max Animation Cycle" : "1.0" : "The highest point in the model's animation cycle (for the sequence named 'range'). This is a decimal between 0 and 1 that represents the progress along the animation path; '0' means the start, '1' means the end, '0.5' is halfway through, etc. The minimum cycle is always 0."
	maxspeed(float) : "Max Speed" : "0.025" : "Max animation speed, in animation cycle per second."
	acceleration(float) : "Acceleration Factor" : "0.025" : "Acceleration/Deceleration rate in cycle per second per second. You probably don't need to change this."
	
	key_open(choices) : "Open Bridge Key" : "+forward" : "Key that the operator should press to move the bridge open. Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	key_close(choices) : "Close Bridge Key" : "+back" : "Key that the operator should press to move the bridge closed. Respects local keybinds - WASD given for refence only." =
	[
		"+forward" : "Forward (W)"
		"+back" : "Back (S)"
		"+moveleft" : "Left (A)"
		"+moveright" : "Right (D)"
	]
	
	sound_start(sound) : "Start Move Sound" : "ambient/machines/machine3.wav" : "The sound the bridge makes when it starts to move under power."
	sound_stop(sound) : "Stop Move Sound" : "doors/garage_stop1.wav" : "The sound the bridge makes when it comes to a complete stop under power."
	sound_crank_start(sound) : "Start Crank Sound" : "buttons/lever1.wav" : "The sound the bridge makes when it starts to move from cranking."
	sound_crank_stop(sound) : "Stop Crank Sound" : "buttons/lever1.wav" : "The sound the bridge makes when it comes to a complete stop from cranking."
	
	phystoggle(choices) : "Disable Physics when Unlocked/Open" : 1 : "Make this bridge non-solid when the bridge is open or unlocked, allowing trains to fall through if the proper precautions are not taken." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	nowire(choices) : "Disable Wiremod Input" : 0 : "If set, the bridge will ignore wiremod inputs." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	input Lock(void) : "Lock the bridge, preventing it from moving. This should be required before moving a train on or off!"
	input Unlock(void) : "Unlock the bridge, allowing it to move again."
	
	input GoToCycle(float) : "Make the bridge move automatically to this animation cycle."
	input Stop(void) : "Stop the bridge's movement."
	input Open(float) : "Make the bridge move automatically to the fully open position (max animation cycle)."
	input Close(float) : "Make the bridge move automatically to the fully closed position (min animation cycle)."
	
	input AddPusher(void) : "Add the !activator to the table's pusher list. This input should be fired by a trigger_multiple OnStartTouch."
	input RemovePusher(void) : "Remove the !activator from the table's pusher list. This input should be fired by a trigger_multiple OnEndTouch."
	
	output OnFullyClosed(void) : "Fired when the bridge reaches minimum animation cycle (fully closed)."
	output OnFullyOpen(void) : "Fired when the bridge reaches maximum animation cycle (fully open)."
	output OnBridgeStarted(void) : "Fired when the bridge starts moving for any reason."
	output OnBridgeStopped(float) : "Fired when the bridge stops for any reason, and supplies the animation cycle as a parameter."
	
	output OnBecomeSafe(void) : "Fired when the bridge becomes safe for trains (locked and fully closed)."
	output OnBecomeUnsafe(void) : "Fired when the bridge becomes unsafe for trains (unlocked or open)."
	
	output OnInitialize(void) : "Fired when the map finishes loading. Useful for parenting things to the bascule bridge leaf via SetParent followed by SetParentAttachmentMaintainOffset (Note: the 'Cosmetic Prop' keyvalues can be used to automate this!)."
]

//Signal Block
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_signal_block.vmt") = tp3_signal_block :
	"Signal Block Controller. This entity scans a stretch of track nodes to determine block occupancy state. Track nodes are set in Gmod."
[
	blockmode(choices) : "Starting Mode" : 0 : "How should this signal block behave?" =
	[
		0 : "Automatic (Test Occupancy)"
		1 : "Force Occupied"
		2 : "Force Clear"
	]
	
	scaninterval(choices) : "Scan Speed" : 100 : "Block Scan Speed, for performance optimization. \n\nSluggish is 2 nodes per second, really only good for special circumstances where you have a REALLY short block with a handful of nodes. \n\nSlow is 5 nodes per second, good for short blocks with a smaller number of nodes. \n\nNormal is 10 nodes per second, good for medium-length blocks. \n\nFast is 20 nodes per second, better for longer blocks with lots of nodes. \n\nInsane is 50 nodes per second and should only be used for hilariously long blocks with enormous amounts of nodes. Use with caution." =
	[
		500 : "Sluggish (2/s)"
		200 : "Slow (5/s)"
		100 : "Normal (10/s)"
		50 : "Fast (20/s)"
		20 : "Insane (50/s)"
	]
	
	hull_lw(integer) : "Trace Width" : 96 : "The width of the box that will be used to scan the track."
	hull_h(integer) : "Trace Height" : 192 : "The height of the box that will be used to scan the track."
	hull_offset(integer) : "Trace Offset" : 0 : "The amount of additional height to move the trace box up by. A value of 0 means the bottom sits on top of the ballast."
	
	// Inputs
	input ForceOccupancy(integer) : "Force this signal block to show up as occupied (1) or clear (0) based on the provided parameter. This stops normal occupancy measurement."
	input UnForceOccupancy(void) : "Stop forcing the signal block to report a specific occupancy status and return to measuring block occupancy normally."
	input TestOccupancy(void) : "Fires either OnTestedOccupied or OnTestedClear depending on the current block state. Similar to the TouchTest input on a trigger."
	
	// Outputs
	output OnOccupied(void) : "Fires when the block state changes from clear to occupied, either naturally or due to being forced."
	output OnOccupiedNatural(void) : "Fires when the block state changes from clear to occupied. Unlike OnOccupied, forcing block state does not fire this input."
	
	output OnClear(void) : "Fires when the block state changes from occupied to clear, either naturally or due to being forced."
	output OnClearNatural(void) : "Fires when the block state changes from occupied to clear. Unlike OnClear, forcing block state does not fire this input."
	
	output OnTestedOccupied(void) : "Fires when the TestOccupancy input is triggered, if the block state is occupied. Otherwise, OnTestedClear fires."
	output OnTestedClear(void) : "Fires when the TestOccupancy input is triggered, if the block state is clear. Otherwise, OnTestedOccupied fires."
]


//Master Signal
@PointClass base(Targetname, Parentname) vecline(cs_pos) studioprop() line(255 255 255, targetname, targetname, targetname, slave_1) line(255 255 255, targetname, targetname, targetname, slave_2) = tp3_signal_master :
	"A scripted signal prop. Can control two other props (extra 'heads' or other parts needed to make a signal work, such as the B&O CPL Marker Lamps) and can interface with the Hammer and Wiremod I/O systems."
[
		//Model Info
	model(studio) : "Model" : "" : "The model path for the signal prop."
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The signal prop's orientation in the world."
	skin(integer) : "Skin" : 0 : "The signal model's default skin."
	bodygroups(string) : "Bodygroups" : "" : "The signal model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	up_powered(choices): "Animation Behavior (Up)" : 0 : "(Animated Signals Only) how should this signal behave moving up/forward through its animation?" =
	[
		0 : "Motorized"
		1 : "Magnetized"
		2 : "Damped Jerk"
		3 : "Bouncy Jerk"
	]
	
	dn_powered(choices): "Animation Behavior (Down)" : 2 : "(Animated Signals Only) how should this signal behave moving down/backward through its animation?" =
	[
		0 : "Motorized"
		1 : "Magnetized"
		2 : "Damped Jerk"
		3 : "Bouncy Jerk"
	]
	
		//Signal Info
	sysname(string) : "Signal System Name" : "" : "The name of the Signal System that this signal will comply with. Signal System files are stored in 'lua/trakpak3/signalsystems/<mapname>'."
	sigtype(string) : "Signal Type" : "" : "The signal type for this signal. Signal Types are defined by the Signal System."
	tags(string) : "Tags" : "" : "Special Signal Tags, used to give the signal code more information. Tags are separated by spaces."
	slave_1(target_destination) : "Slave Signal 1" : : "(Optional) A tp3_signal_slave that this signal will control."
	slave_2(target_destination) : "Slave Signal 2" : : "(Optional) A tp3_signal_slave that this signal will control."
	block(target_destination) : "Signal Block" : : "The tp3_signal_block that this signal governs."
	nextsignal(target_destination) : "Next Signal" : : "The tp3_signal_master that comes after this one."
	automatic(choices) : "Start Mode" : 1 : "Should this signal start in automatic (reading the block) or manual mode?" =
	[
		0 : "Manual"
		1 : "Automatic"
	]
	ctc_state(choices) : "Starting CTC State" : 2 : "What is this signal's initial CTC state? 'Hold' will stop trains at this signal even if the track ahead is clear. 'Allow' will allow trains to pass depending on the track/route/other signals. CTC state can be changed with Hammer I/O and from a dispatch board. Typically, this should be 'Allow' for automatic signals and 'Hold' for interlocking signals." =
	[
		0 : "Hold"
		2 : "Allow"
	]
	interlock(choices) : "Interlock Path Switches" : 0 : "If set, this signal will interlock with any switches it governs. If the CTC State is Allow or Once, you won't be able to throw any of the switches in the current route; you must set the signal to Hold or Force to unlock them. This only applies to switches at junctions/interlockings, which will have Paths assigned using the Path Configurator tool. This is a safety feature to prevent people from throwing switches in front of trains, and can work with both automatic and manual switch stands." =
	[
		0 : "No"
		1 : "Yes"
	]
	cs_pos(vector) : "Cab Signal Pos" : : "When a tp3_cabsignal_box passes over this point (moving in the correct direction), it will register as having passed this signal. Place it roughly level with the railheads, in the center of the two rails, and about 128-256 units before the signal."
	nickname(string) : "Nickname" : "" : "(Optional) The signal's nickname, used in-game to describe what it does. Unlike the targetname, this doesn't have to be unique."
	
	gmod_allowtools(string) readonly : "Allow Tools" : "wire_adv wire_debugger tp3_path_configurator" : "Disables the toolgun on this entity except for the tools listed here."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	//Inputs and Outputs
	
	input SetManual(string) : "Forces a signal to display the given aspect name (if given) and stops all automatic behavior."
	input SetAutomatic(void) : "Forces the signal to resume responding to the signaling system normally."
	
	input SetCTC_Hold(void) : "Set the signal's CTC state to Hold. The signal will not let trains pass in this state."
	input SetCTC_Once(void) : "Set the signal's CTC state to Once. The signal will allow one train to pass (depending on track conditions) and then revert to Hold."
	input SetCTC_Allow(void) : "Set the signal's CTC state to Allow. The signal will allow all trains (depending on track conditions)."
	input SetCTC_Force(void) : "Set the signal's CTC state to Force. The signal will allow all trains with a restrictive aspect regardless of track conditions."
	
	output OnChangedColor(integer) : "Fires whenever this specific signal head changes color, and passes that color code as a parameter."
	output OnChangedAspect(string) : "Fires whenever the signal (including slave signals) changed aspect, and passes that aspect as a parameter."
]

//Slave Signal
@PointClass base(Targetname, Parentname) studioprop() = tp3_signal_slave :
	"A dummy/supervised signal prop. Has very limited I/O capability and usually only responds to controls from a tp3_signal_master."
[
	model(studio) : "Model" : "" : "The model path for the signal prop."
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The signal prop's orientation in the world."
	
	skin(integer) : "Skin" : 0 : "The signal model's default skin."
	bodygroups(string) : "Bodygroups" : "" : "The signal model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	up_powered(choices): "Animation Behavior (Up)" : 0 : "(Animated Signals Only) how should this signal behave moving up/forward through its animation?" =
	[
		0 : "Motorized"
		1 : "Magnetized"
		2 : "Damped Jerk"
		3 : "Bouncy Jerk"
	]
	
	dn_powered(choices): "Animation Behavior (Down)" : 2 : "(Animated Signals Only) how should this signal behave moving down/backward through its animation?" =
	[
		0 : "Motorized"
		1 : "Magnetized"
		2 : "Damped Jerk"
		3 : "Bouncy Jerk"
	]
	gmod_allowtools(string) readonly : "Allow Tools" : "wire_adv wire_debugger" : "Disables the toolgun on this entity except for the tools listed here."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	input SetBodygroups(string) : "Force the signal to display these bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	input SetSkin(integer) : "Force the signal to display this skin."
	input SetCycle(float) : "Force the signal to go to this point in its animation cycle."
	output OnChangedColor(integer) : "Fires whenever this specific signal head changes color, and passes that color code as a parameter."
]

//Path Loader
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_path_loader.vmt") line(targetname, targetname, targetname, target) = tp3_path_loader : "OBSOLETE! Use the Path Configurator Tool in-game instead! An entity that modifies a signal (or two). Can be used to monitor switch stands and give different indications for diverging routes, or to modify a single signal path. Additional stand_x and state_x keyvalues can be added by disabling SmartEdit. NOTE: all stand_x and state_x keyvalues must have only one character after the underscore. Use a-z if you need more than 10."
[
	//Forward
	target(target_destination) : "Signal to Modify" : : "The signal this path applies to."
	block(target_destination) : "Signal Block" : : "The tp3_signal_block that this signal governs."
	nextsignal(target_destination) : "Next Signal" : : "The tp3_signal_master that comes after this one."
	diverging(choices) : "Path Main/Diverging" : 0 : "Is this path a main or a diverging path?" = 
	[
		0 : "Main"
		1 : "Diverging"
	]
	speed(choices) : "Path Speed" : 5 : "The maximum allowable speed through this path." = 
	[
		5 : "Full Rated"
		4 : "Limited"
		3 : "Medium"
		2 : "Slow"
		1 : "Restricted"
	]
	
	//Reverse
	target2(target_destination) : "Signal to Modify (Reverse)" : : "The opposing signal this path applies to."
	block2(target_destination) : "Signal Block (Reverse)" : : "The opposing tp3_signal_block that this signal governs."
	nextsignal2(target_destination) : "Next Signal (Reverse)" : : "The opposing tp3_signal_master that comes after this one."
	diverging2(choices) : "Path Main/Diverging (Reverse)" : 0 : "Is the opposing path a main or a diverging path?" = 
	[
		0 : "Main"
		1 : "Diverging"
	]
	speed2(choices) : "Path Speed" : 0 : "The maximum allowable speed through the opposing path." = 
	[
		5 : "Full Rated"
		4 : "Limited"
		3 : "Medium"
		2 : "Slow"
		1 : "Restricted"
		0 : "Same as Forward"
	]
	
	//Switches
	stand_1(target_destination) : "Switch Stand 1" : : "A tp3_switch_lever_anim/bg to monitor."
	state_1(choices) : "Switch Stand 1 State" : 0 : "Switch Stand 1's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_2(target_destination) : "Switch Stand 2" : : "A tp3_switch_lever_anim/bg to monitor."
	state_2(choices) : "Switch Stand 2 State" : 0 : "Switch Stand 2's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_3(target_destination) : "Switch Stand 3" : : "A tp3_switch_lever_anim/bg to monitor."
	state_3(choices) : "Switch Stand 3 State" : 0 : "Switch Stand 3's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_4(target_destination) : "Switch Stand 4" : : "A tp3_switch_lever_anim/bg to monitor."
	state_4(choices) : "Switch Stand 4 State" : 0 : "Switch Stand 4's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_5(target_destination) : "Switch Stand 5" : : "A tp3_switch_lever_anim/bg to monitor."
	state_5(choices) : "Switch Stand 5 State" : 0 : "Switch Stand 5's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_6(target_destination) : "Switch Stand 6" : : "A tp3_switch_lever_anim/bg to monitor."
	state_6(choices) : "Switch Stand 6 State" : 0 : "Switch Stand 6's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_7(target_destination) : "Switch Stand 7" : : "A tp3_switch_lever_anim/bg to monitor."
	state_7(choices) : "Switch Stand 7 State" : 0 : "Switch Stand 7's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	stand_8(target_destination) : "Switch Stand 8" : : "A tp3_switch_lever_anim/bg to monitor."
	state_8(choices) : "Switch Stand 8 State" : 0 : "Switch Stand 8's Required State." =
	[
		0 : "Main/Normal"
		1 : "Diverging/Reverse"
	]
	
	input SetSpeed(integer) : "Set this forward path's maximum speed code, an integer from 1-5."
	input SetSpeed2(integer) : "Set this reverse path's maximum speed code, an integer from 1-5."
	
	output OnPathTrue(void) : "Fires when this Path Loader's path becomes selected."
	output OnPathFalse(void) : "Fires when this Path Loader's path becomes de-selected."
]

//Bidirectional Track Controller
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_bidirectional.vmt") = tp3_bidirectional :
"An entity that allows safe, bi-directional operation of multi-block single track. When a train enters from the bottom (lowest block number) or the top (highest block number), you can use Hammer outputs to set the CTC state of the signals at the other end to Hold, thus preventing another train from entering the block and causing a cornfield meet. At the same time, it will allow multiple trains to follow each other in the same direction. Once all of the blocks are clear, Hammer Outputs can set the CTC state back to Allow, if desired."
[
	block_1(target_destination) : "Block 1" : : "The 1st tp3_signal_block in the chain."
	block_2(target_destination) : "Block 2" : : "The 2nd tp3_signal_block in the chain."
	block_3(target_destination) : "Block 3" : : "The 3rd tp3_signal_block in the chain."
	block_4(target_destination) : "Block 4" : : "The 4th tp3_signal_block in the chain."
	block_5(target_destination) : "Block 5" : : "The 5th tp3_signal_block in the chain."
	block_6(target_destination) : "Block 6" : : "The 6th tp3_signal_block in the chain."
	block_7(target_destination) : "Block 7" : : "The 7th tp3_signal_block in the chain."
	block_8(target_destination) : "Block 8" : : "The 8th tp3_signal_block in the chain."
	
	enabled(choices) : "Start Disabled" : 1 : "Should this entity start disabled?" =
	[
		0 : "Yes"
		1 : "No"
	]
	
	input Enable(void) : "Turn this entity on and allow it to monitor blocks normally."
	input Disable(void) : "Turn this entity off, forcing the signals to rely on their normal ABS logic."
	output OnBottomOccupied(void) : "Fires when a train enters from the bottom (the smallest numbered block in the chain, Block 1). This output will not fire again until the whole chain is clear."
	output OnTopOccupied(void) : "Fires when a train enters from the top (the largest numbered block in the chain, for example Block 8 if you have 8 blocks in the chain). This output will not fire again until the whole chain is clear."
	output OnMiddleOccupied(void) : "Fires when a train enters one of the intermediate blocks. This output will not fire again until the whole chain is clear."
	output OnChainClear(void) : "Fires when all the blocks become cleared."
]

//Block Logic Gate
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_logic_gate.vmt") = tp3_logic_gate :
"An entity that monitors multiple tp3_signal_block entities, applies a Boolean operator to them, and returns a result. This entity can be treated like a tp3_signal_block by other entities."
[
	blockmode(choices) : "Starting Mode" : 0 : "How should this logic gate behave?" =
	[
		0 : "Automatic (Test Logic)"
		1 : "Force Occupied"
		2 : "Force Clear"
	]
	
	operator(choices) : "Logic Operator" : "OR" : "The Logical (Boolean) operator to apply to all the referenced Signal Blocks. Occupied = True, Clear = False. Blank entries are left out of the equation." =
	[
		"OR" : "OR"
		"AND" : "AND"
		"NOR" : "NOR"
		"NAND" : "NAND"
		"EQUAL" : "EQUAL"
		"UNEQUAL" : "UNEQUAL"
	]
	
	block_1(target_destination) : "Block 1" : : "A tp3_signal_block to monitor."
	block_2(target_destination) : "Block 2" : : "A tp3_signal_block to monitor."
	block_3(target_destination) : "Block 3" : : "A tp3_signal_block to monitor."
	block_4(target_destination) : "Block 4" : : "A tp3_signal_block to monitor."
	block_5(target_destination) : "Block 5" : : "A tp3_signal_block to monitor."
	block_6(target_destination) : "Block 6" : : "A tp3_signal_block to monitor."
	block_7(target_destination) : "Block 7" : : "A tp3_signal_block to monitor."
	block_8(target_destination) : "Block 8" : : "A tp3_signal_block to monitor."
	
	// Inputs
	input ForceOccupancy(integer) : "Force this logic gate to show up as occupied (1) or clear (0) based on the provided parameter. This stops normal logic monitoring."
	input UnForceOccupancy(void) : "Stop forcing the logic gate to report a specific occupancy status and return to monitoring logic normally."
	input TestOccupancy(void) : "Fires either OnTestedOccupied or OnTestedClear depending on the current logic state. Similar to the TouchTest input on a trigger."
	
	input SetBlock1(target_destination) : "Set this logic gate's Block 1 to this entity. If blank, the entry will be cleared."
	input SetBlock2(target_destination) : "Set this logic gate's Block 2 to this entity. If blank, the entry will be cleared."
	input SetBlock3(target_destination) : "Set this logic gate's Block 3 to this entity. If blank, the entry will be cleared."
	input SetBlock4(target_destination) : "Set this logic gate's Block 4 to this entity. If blank, the entry will be cleared."
	input SetBlock5(target_destination) : "Set this logic gate's Block 5 to this entity. If blank, the entry will be cleared."
	input SetBlock6(target_destination) : "Set this logic gate's Block 6 to this entity. If blank, the entry will be cleared."
	input SetBlock7(target_destination) : "Set this logic gate's Block 7 to this entity. If blank, the entry will be cleared."
	input SetBlock8(target_destination) : "Set this logic gate's Block 8 to this entity. If blank, the entry will be cleared."
	
	// Outputs
	output OnOccupied(void) : "Fires when the logic state changes from clear to occupied, either naturally or due to being forced."
	output OnOccupiedNatural(void) : "Fires when the logic state changes from clear to occupied. Unlike OnOccupied, forcing logic state does not fire this input."
	
	output OnClear(void) : "Fires when the logic state changes from occupied to clear, either naturally or due to being forced."
	output OnClearNatural(void) : "Fires when the logic state changes from occupied to clear. Unlike OnClear, forcing logic state does not fire this input."
	
	output OnTestedOccupied(void) : "Fires when the TestOccupancy input is triggered, if the logic state is occupied. Otherwise, OnTestedClear fires."
	output OnTestedClear(void) : "Fires when the TestOccupancy input is triggered, if the logic state is clear. Otherwise, OnTestedOccupied fires."
]

//Crossing Controller
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_crossing.vmt") = tp3_crossing :
"An entity that controls railroad crossings at grade. It will monitor tp3_signal_blocks and control tp3_crossing_gates.\n\nCrossings can support any number of tracks. Each track requires two blocks, A and B. Each block's nodes should start AT the edge crossing and go AWAY from it. This is to ensure that the block entities find the 'first' prop in the block.\n\nIf you need more than two tracks, add extra block keyvalues following the existing format, 'block_a_n' and  'block_b_n'. There is also the 'Island' block which covers the area inside the crossing (where the road and rails overlap), that the A and B blocks don't touch."
[
	predicting(choices) : "Use Predictor Circuit?" : 1 : "Sets whether the crossing will use the train's speed and position to determine when to lower the gates. This is to prevent trains from holding the gates down too long if they are approaching slowly. If disabled, gates will go down as soon as something enters the block. Predictor circuits are used on most crossings after the late 1960s. NOTE: Distance is measured between the first detected prop in a signal block and THIS entity, so be smart about where you put it!" =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	arrivaltarget(float) : "Predictor Target" : "15.0" : "The approximate time, in seconds, before the train reaches the crossing that the gates will start to go down. Does nothing if Predictor Circuit is disabled."
	
	//timeout(float) : "Crossing Timeout" : "60.0" : "If the crossing triggers and nothing actually passes over it, the crossing will reset after this many seconds. If 0 or less, the timeout timer is disabled."
	
	block_island(target_destination) : "Island Block" : : "A tp3_signal_block that will cover all the track in the area of the crossing itself. The A and B blocks should not cover the crossing area."
	
	block_a_1(target_destination) : "Block (A) 1" : : "The tp3_signal_block on the 'A' side of Track 1."
	block_b_1(target_destination) : "Block (B) 1" : : "The tp3_signal_block on the 'B' side of Track 1."
	block_a_2(target_destination) : "Block (A) 2" : : "The tp3_signal_block on the 'A' side of Track 2."
	block_b_2(target_destination) : "Block (B) 2" : : "The tp3_signal_block on the 'B' side of Track 2."
	
	input ForceTrigger(void) : "Manually force the crossing to trigger until manually cleared."
	input ForceClear(void) : "Manually force the crossing to clear, even if there is a train on them. Resumes automatic behavior."
	input RemoveForce(void) : "Removes force conditions, allowing the crossing to judge for itself whether to stay triggered or clear. Resumes automatic behavior."
	
	output OnTrigger(void) : "Fires when the crossing triggers."
	output OnClear(void) : "Fires when the crossing clears."
]

//Crossing Gate
@PointClass base(Targetname) studioprop() = tp3_crossing_gate : 
"A prop that responds to commands from a tp3_crossing entity. Gate not actually required.\n\nThe model assumes the skin controls the light status, and bodygroups control the configuration/gate state, and animations control the gate state."
[
	xing(target_destination) : "Controller Entity" : : "The tp3_crossing that this gate will listen to."
	
	model(studio) : "Model" : "" : "The model path for the gate prop."
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The gate prop's orientation in the world."
	
	skin(integer) : "Skin (Open)" : 0 : "The gate model's skin when the lights are off."
	skin2(integer) : "Skin (Closed)" : 3 : "The gate model's skin when the lights are on."
	bodygroups(string) : "Bodygroups (Open)" : "" : "The gate model's bodygroups when the gate is open. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	bodygroups2(string) : "Bodygroups (Closed)" : "" : "The gate model's bodygroups when the gate is closed. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1. If blank, bodygroups will not be changed."
	anim_trans(string) : "Transition Anim (Open)" : "open" : "The gate's transition-to-open animation (sequence). If blank, model will not be animated."
	anim_trans2(string) : "Transition Anim (Closed)" : "close" : "The gate's transition-to-closed animation (sequence). If blank, model will not be animated."
	anim_idle(string) : "Idle Anim (Open)" : "idle_open" : "The gate's default animation (sequence) when open. If blank, model will not be animated."
	anim_idle2(string) : "Idle Anim (Closed)" : "idle_closed" : "The gate's default animation (sequence) when down. If blank, model will not be animated."
	
	bellsound(sound) : "Bell Sound" : "" : "The sound to play and loop when the gates start to close. If blank, there will be no bell sound."
	bellmode(choices) : "Bell Mode" : 2 : "When should the bell stop ringing?" =
	[
		0 : "Bell doesn't ring."
		1 : "Bell rings until gate is fully closed."
		2 : "Bell rings until gate is fully open."
		3 : "Bell rings until gate starts to open."
		4 : "Bell rings while gate is in motion."
	]
	
	warning(float) : "Warning Delay" : "4.0" : "After the lights/bell come on, the gate will wait this many seconds before closing."
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	output OnLightsOn(void) : "Fired when the lights turn on."
	output OnGateClose(void) : "Fired when the gate starts closing."
	output OnLightsOff(void) : "Fired when the lights turn off."
	output OnGateOpen(void) : "Fired when the gate starts opening."
]
//Custom Sign Stuff
@BaseClass = TP3_SIGNTEXT_SINGLE
[
	text(string) : "Sign Text" : "" : "The text to display on the sign. You can make multi-line text using [n] as a newline character."
	text_size(float) : "Text Size" : 8 : "The size (height) of the font in inches."
	input SetText(string) : "Set the text of the sign."
]
@BaseClass = TP3_SIGNTEXT_MULTI
[
	text_1(string) : "Sign Text 1" : "" : "The text to display on the sign (Attachment Point 'text1'). You can make multi-line text using [n] as a newline character."
	text_2(string) : "Sign Text 2" : "" : "The text to display on the sign (Attachment Point 'text2'). You can make multi-line text using [n] as a newline character."
	text_3(string) : "Sign Text 3" : "" : "The text to display on the sign (Attachment Point 'text3'). You can make multi-line text using [n] as a newline character."
	text_4(string) : "Sign Text 4" : "" : "The text to display on the sign (Attachment Point 'text4'). You can make multi-line text using [n] as a newline character."
	text_size_1(float) : "Text Size 1" : 8 : "The size (height) of the font in inches."
	text_size_2(float) : "Text Size 2" : 8 : "The size (height) of the font in inches."
	text_size_3(float) : "Text Size 3" : 8 : "The size (height) of the font in inches."
	text_size_4(float) : "Text Size 4" : 8 : "The size (height) of the font in inches."
	input SetText1(string) : "Set the text of the sign."
	input SetText2(string) : "Set the text of the sign."
	input SetText3(string) : "Set the text of the sign."
	input SetText4(string) : "Set the text of the sign."
]
@BaseClass base(Targetname) = TP3_SIGNTEXT_COMMON
[
	
	
	text_align_h(choices) : "Text Alignment (Horizontal)" : 0 : "Horizontal Alignment" =
	[
		-1 : "Left"
		0 : "Center"
		1 : "Right"
	]
	text_align_v(choices) : "Text Alignment (Vertical)" : 0 : "Vertical Alignment" =
	[
		-1 : "Bottom"
		0 : "Center"
		1 : "Top"
	]
	text_offset(float) : "Text Offset" : "0.25" : "The distance (in inches) from the surface that the text will be displayed. Larger numbers (0.5, 1.0, etc.) may be used to combat Z-fighting."
	text_font(string) : "Font" : "Roboto" : "The font in which the text will be displayed. Note that this is NOT the font's .ttf filename. See the Trakpak3 Github Wiki for more information. https://github.com/MagnumMacKivler/trakpak3/wiki/Custom-Fonts-for-Signage"
	text_res(integer) : "Text Resolution" : 128 : "The resolution (height) of the text, in pixels. Text will be scaled to fit the Text Size."
	text_weight(integer) : "Weight (Boldness)" : 500 : "The line weight of the font. Larger numbers are bolder."
	text_color(color255) : "Text Color" : "0 0 0" : "The color of the text. Accepts Alpha as a fourth parameter."
	text_color2(color255) : "Text Outline Color" : "0 0 0" : "The color of the text outline (if used). Accepts Alpha as a fourth parameter."
	text_outw(integer) : "Text Outline Width" : 4 : "The width, in pixels, of the text outline (if used)."
	
	spawnflags(flags) =
	[
		1 : "Italic" : 0
		2 : "Underline" : 0
		4 : "Outline" : 0
		8 : "Glow-In-The-Dark" : 0
		//16 : "Ignore Max Draw Radius (Good for Skyboxes)" : 0 //There is no max draw radius.
		//32 : "Strikethrough" : 0 //Does not appear to work at all
		//64 : "Shadow" : 0 //Only shows 1 pixel shadow, making it useless for map signs
	]
	
	
	input SetColor(string) : "Set the color of the text (R G B)."
	input SetColor2(string) : "Set the color of the outline text (if used) (R G B)."
	input SetGlow(integer) : "Make the text glow in the dark or be shaded by static map lighting."
]
//Custom Sign, Prop (Single)
@PointClass base(TP3_SIGNTEXT_COMMON, TP3_SIGNTEXT_SINGLE) vecline(text_pos) studioprop() = tp3_sign_prop : 
"A prop that renders user-defined text in 2D relative to a prop. Useful for speed signs, interlocking signs, signal number plates, etc."
[
	model(studio) : "Model" : "" : "The model path for the sign."
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The sign model's orientation in the world. The text will be oriented such that the angle's forward axis is the normal of the text plane."
	skin(integer) : "Skin" : 0 : "The sign model's skin."
	
	bodygroups(string) : "Bodygroups" : "" : "The sign model's bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	text_pos(vector) : "Text Origin" : : "The position in the world where the text will be placed. Works with Text Alignment."
	gmod_allowtools(string) readonly : "Allow Tools" : "none" : "Disables the toolgun on this entity except for the tools listed here."
	disableshadows(choices) : "Disable Shadows" : 0 : "Prevent this entity from casting shadows." =
	[
		0 : "No"
		1 : "Yes"
	]
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
]

//Custom Sign, Prop (Multi/Auto)
@PointClass base(TP3_SIGNTEXT_COMMON, TP3_SIGNTEXT_MULTI) studioprop() = tp3_sign_auto : 
"A prop that renders user-defined text in 2D relative to a prop. Instead of specifying the text position manually (like with tp3_sign_prop), this model uses pre-encoded attachment points (named 'text1' thru 'text4'). Useful for speed signs, interlocking signs, signal number plates, etc."
[
	model(studio) : "Model" : "" : "The model path for the sign."
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The sign model's orientation in the world."
	skin(integer) : "Skin" : 0 : "The sign model's skin."
	
	bodygroups(string) : "Bodygroups" : "" : "The sign model's bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	gmod_allowtools(string) readonly : "Allow Tools" : "none" : "Disables the toolgun on this entity except for the tools listed here."
	disableshadows(choices) : "Disable Shadows" : 0 : "Prevent this entity from casting shadows." =
	[
		0 : "No"
		1 : "Yes"
	]
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
]

//Custom Sign, World
@PointClass base(TP3_SIGNTEXT_COMMON, TP3_SIGNTEXT_SINGLE) studioprop("models/editor/axis_helper_thick.mdl") = tp3_sign_world : 
"An entity that renders text in a 2D plane defined by this entity's positions and angles. Unlike tp3_sign_prop, this does not require a model. Great for writing text onto brushes!"
[
	angles(angle) : "Angle (P Y R)" : "0 0 0" : "The text plane's orientation in the world. The text will be oriented such that the angle's forward axis is the normal of the text plane."
]

//Dispatch/CTC Board
@PointClass vecline(endpos) studioprop("models/editor/axis_helper_thick.mdl") = tp3_dispatch_board : 
"Creates a 2D Dispatch board in the world for players to operate. Dispatch boards can display block occupancy information on a simplified map of the route, as well as control signals and switches."
[
	board(string) : "Dispatch Board Name" : "" : "The name of the dispatch board page to use."
	endpos(vector) : "Bottom Corner" : : "The bottom right corner of the dispatch board. This entity's position is the top left corner."
]

//Dispatch-Hammer Interface
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_dispatch_proxy.vmt") = tp3_dispatch_proxy : 
"An entity that allows users to control map entities from a dispatch board using the general I/O system. Each generic button on a dispatch board is linked to one of these and will fire one of ten different outputs based on its current state (0 to 9)."
[
	state(choices) : "Initial State" : 0 : "Starting state for this dispatch proxy." =
	[
		0 : "0"
		1 : "1"
		2 : "2"
		3 : "3"
		4 : "4"
		5 : "5"
		6 : "6"
		7 : "7"
		8 : "8"
		9 : "9"
	]
	maxstate(choices) : "Maximum State" : 9 : "Maximum state for this dispatch proxy (for use with the AddState and SubtractState inputs)." =
	[
		0 : "0"
		1 : "1"
		2 : "2"
		3 : "3"
		4 : "4"
		5 : "5"
		6 : "6"
		7 : "7"
		8 : "8"
		9 : "9"
	]
	
	input SetState(integer) : "Set this dispatch proxy's state and update the buttons on dispatch boards accordingly."
	input AddState(integer) : "Increase this dispatch proxy's state value by the supplied parameter (default: 1). If the resulting state value exceeds the maximum, it will wrap around."
	input SubtractState(integer) : "Decrease this dispatch proxy's state value by the supplied parameter (default: 1)."
	output OnFireAny(integer) : "Fired when the player presses the linked button on a dispatch board. Supplies the current state number as a parameter. If the resulting state value exceeds the minimum (0), it will wrap around."
	output OnFire0(void) : "Fired when the current state is 0 and the player presses the linked button on a dispatch board."
	output OnFire1(void) : "Fired when the current state is 1 and the player presses the linked button on a dispatch board."
	output OnFire2(void) : "Fired when the current state is 2 and the player presses the linked button on a dispatch board."
	output OnFire3(void) : "Fired when the current state is 3 and the player presses the linked button on a dispatch board."
	output OnFire4(void) : "Fired when the current state is 4 and the player presses the linked button on a dispatch board."
	output OnFire5(void) : "Fired when the current state is 5 and the player presses the linked button on a dispatch board."
	output OnFire6(void) : "Fired when the current state is 6 and the player presses the linked button on a dispatch board."
	output OnFire7(void) : "Fired when the current state is 7 and the player presses the linked button on a dispatch board."
	output OnFire8(void) : "Fired when the current state is 7 and the player presses the linked button on a dispatch board."
	output OnFire9(void) : "Fired when the current state is 7 and the player presses the linked button on a dispatch board."
]

//Equipment Defect Detector
@PointClass base(Targetname) iconsprite("trakpak3_common/hammer/tp3_defect_detector.vmt") = tp3_defect_detector :
"An entity that scans for defects (derailed props) as a train passes over them, then broadcasts an appropriate message to all Trakpak3 Cab Signal Boxes. This entity has two axes that you must position. See Help for details."
[
	boxsize(float) : "Scan Box Size" : "64.0" : "A square, axis-aligned box will be swept along the Scan Lines 1 and 2 to check for dragging equipment."
	boxdepth(float) : "Scan Box Depth" : "4.0" : "The depth or height of the scan box. The top of the box will be in line with the Scan Lines."
	
	line1(axis) : "Scan Line 1" : : "First Scan Line. This point should be positioned about 2 units below the top of the railhead on one side of the tracks. An axis-aligned square box the size of 'Scan Box Size' will be swept from start to end along this line to check for dragging equipment. This box will hit everything except world geometry and static props. Longer lines allow faster trains."
	line2(axis) : "Scan Line 2" : : "Second Scan Line. This point should be positioned about 2 units below the top of the railhead on the other side of the tracks. An axis-aligned square box the size of 'Scan Box Size' will be swept from start to end along this line to check for dragging equipment. This box will hit everything except world geometry and static props. Longer lines allow faster trains."
	
	trigger(target_destination) : "Trigger" : : "A trigger_multiple to use as an axle counter. The detector will not work unless this is present. The trigger should be set to detect Physics Objects only and should be at or below the railhead."
	
	minspeed(float) : "Minimum Detection Speed" : "176" : "Minimum speed (units per second) for the detector to actually 'see' a prop. 10 Player Scale MPH = 176 units/sec."
	
	mintemp(float) : "Ambient Temperature (Min)" : "65" : "The defect detector will report a random ambient temperature between the minimum and maximum. These values are unitless."
	maxtemp(float) : "Ambient Temperature (Max)" : "72" : "The defect detector will report a random ambient temperature between the minimum and maximum. These values are unitless."
	
	soundfont(string) : "Sound Font Name" : "GE" : "The name of the sound font to use. Case-insensitive. See the Trakpak3 Wiki for more details on sound fonts."
	
	
	speakintro(choices) : "Speak Intro Initially?" : 1 : "Should the detector play the Sentence (Intro) when a train first rolls over it?" =
	[
		0 : "No"
		1 : "Yes"
	]
	instantreport(choices) : "Report Defects Instantly?" : 1 : "Should the detector alert the engineer to a defect immediately, or wait until the train has passed?" =
	[
		0 : "No (Wait)"
		1 : "Yes (Instantly)"
	]
	
	s_intro(string) : "Sentence (Intro)" : "T P 3 equipment defect detector milepost 0 point 0 track 1" : "Sentence to begin a transmission (case-insensitive). Typically this part identifies the railroad, milepost, and track. This sentence is inserted into the other sentences using the %intro variable."

	s_nodefects(string) : "Sentence (No Defects)" : "%intro no_defects repeat no_defects" : "Sentence to speak after a train passes the detector completely, with no defects (case-insensitive). Additionally, you can insert the following variables: %intro."
	
	s_dragging_equipment(string) : "Sentence (Dragging Equipment)" : "%intro beep you_have_a_defect dragging_equipment near axle %def_axle a_ground_inspection_is_required" : "Sentence to speak when a train has dragging equipment (case-insensitive). Additionally, you can insert the following variables: %intro, %def_axle, %def_car."
	
	s_hotbox(string) : "Sentence (Hot Box)" : "%intro beep you_have_a_defect hot_box near axle %def_axle a_ground_inspection_is_required" : "Sentence to speak when a train has an overheated axle bearing (case-insensitive). Additionally, you can insert the following variables: %intro, %def_axle, %def_car."
	
	s_outro(string) : "Sentence (Outro)" : "total_axle count %axles train_speed %mph temperature %temp degrees detector out" : "Sentence to end a transmission (case-insensitive). Typically this provides status info like train length, axles, or cars, as well as temperature. Additionally, you can insert the following variables: %axles, %cars, %feet, %meters, %mph, %kph, %temp."
	
	s_generic1(string) : "Sentence (Generic 1)" : : "Generic sentence, can be inserted into other sentences using the %generic1 variable. Additionally, you can use any variables that the 'host' sentence has access to."
	s_generic2(string) : "Sentence (Generic 2)" : : "Generic sentence, can be inserted into other sentences using the %generic2 variable. Additionally, you can use any variables that the 'host' sentence has access to."
	s_generic3(string) : "Sentence (Generic 3)" : : "Generic sentence, can be inserted into other sentences using the %generic3 variable. Additionally, you can use any variables that the 'host' sentence has access to."
	s_generic4(string) : "Sentence (Generic 4)" : : "Generic sentence, can be inserted into other sentences using the %generic4 variable. Additionally, you can use any variables that the 'host' sentence has access to."
	//input AddProp(void) : "Auto-Wired in-game. Do not wire this input."
	//input RemoveProp(void) : "Auto-Wired in-game. Do not wire this input."
]

//Rotary Dumper
@PointClass base(Targetname, Angles) studioprop() = tp3_rotary_dumper : "A rotating drum that unloads open-top cars by tipping them over."
[
	model(studio) : "Model" : "" : "The model path for the dumper."
	skin(integer) : "Skin" : 0 : "The skin for the dumper model."
	bodygroups(string) : "Bodygroups" : "" : "The model's default bodygroups. Formatted as a sequence of numbers separated by spaces. So for example '0 2 1' will set the first bodygroup to 0, the second bodygroup to 2, and the third bodygroup to 1."
	
	dumpangle(float) : "Dump Angle" : "-135" : "The roll angle the dumper. If the dumper rotates the wrong way, use a negative number."
	maxspeed(float) : "Max Speed" : "15" : "Max rotational speed, in degrees per second."
	acceleration(float) : "Acceleration Factor" : "2.5" : "Acceleration/Deceleration rate in degrees per second per second. You probably don't need to change this."
	
	clamp_model(studio) : "Clamp Model" : : "The model path for the dumper clamps."
	clamp_max(float) : "Max Clamp Height" : "192" : "The maximum height of the car clamps above the railhead, varies from model to model."
	clamp_min(float) : "Min Clamp Height" : "128" : "The minimum height of the car clamps above the railhead, varies from model to model."
	axis_height(float) : "Axis Height" : "34" : "The height of the rotation axis (the model origin) above the railhead. This usually corresponds with the height from the railhead to the coupler centers."
	
	sound_start(sound) : "Start Move Sound" : "ambient/machines/machine3.wav" : "The sound the dumper makes when it starts to move."
	sound_stop(sound) : "Stop Move Sound" : "doors/garage_stop1.wav" : "The sound the dumper makes when it comes to a complete stop."
	sound_dump(sound) : "Dump Sound" : : "The sound of the car's contents being dumped out."
	sound_clamp(sound) : "Clamp Sound" : : "The sound played when the clamps grab onto a car."
	
	motor_model(studio) : "Motor Model" : : "The model path for the drive motors."
	motor_f(choices) : "Motor Position (Front)" : 1 : "This entity can automatically place animated motors and gears to drive the dumper." =
	[
		0 : "None"
		1 : "Outside"
		2 : "Inside"
	]
	motor_r(choices) : "Motor Position (Rear)" : 1 : "This entity can automatically place animated motors and gears to drive the dumper." =
	[
		0 : "None"
		1 : "Outside"
		2 : "Inside"
	]
	
	LightingOrigin(target_destination) : "Lighting Origin" : : "An entity (NOT info_lighting) from which to sample lighting, for example, info_target. The info_lighting entity only works for prop_static."
	
	gmod_allowtools(string) readonly : "Allow Tools" : "none" : "Disables the toolgun on this entity except for the tools listed here."
	
	input Dump(void) : "Begin the dump cycle."
	output OnCarEmptied(void) : "Fired when a car is in the dumper and has been dumped."
	output OnCycleFinished(void) : "Fired when the dumper has returned to its normal position."
	
]